Title,Body,Labels,Milestone
"Epic: Repo, environments, and CDK foundations","Goal: Stand up a monorepo with IaC, environments, and CI/CD to enable fast iteration.\nAcceptance:\n- Monorepo with infra/backend/frontend packages\n- CDK bootstrap complete and base stacks deployed\n- GitHub Actions set up with OIDC to AWS\n- Dashboards for core services live","Epic,Infra,CI/CD,MVP","MVP"
"Epic: Auth and frontend scaffold","Goal: Authenticate users with Cognito and deliver a React SPA with core routes.\nAcceptance:\n- Cognito integrated; JWTs flow to APIs\n- SPA with Upload, Chat, Explorer routes\n- Pre-signed upload flow wired","Epic,Frontend,Auth,MVP","MVP"
"Epic: Import pipeline (MVP)","Goal: Reliable CSV ingestion from S3 to DynamoDB with idempotency and job tracking.\nAcceptance:\n- S3→SQS→Lambda parsing pipeline\n- Step Functions orchestration for large files\n- Idempotent writes; job status and errors visible","Epic,Backend,Data,MVP","MVP"
"Epic: Query service and aggregates","Goal: Low-latency stats via materialized aggregates, with a clean REST API.\nAcceptance:\n- DDB Streams aggregator maintains counts\n- /stats endpoint answers grade/area/date queries\n- Explorer UI uses the API efficiently","Epic,Backend,Data,API,MVP","MVP"
"Epic: Chat NL-to-Query","Goal: Natural language to constrained query DSL with a simple chat UI.\nAcceptance:\n- DSL schema and guardrails defined\n- NL translator maps prompts to DSL\n- Chat endpoint + UI return accurate answers","Epic,Backend,Chat,API,MVP","MVP"
"Epic: Scale, reliability, and UX polish","Goal: Confidently handle 1M+ rows with backpressure, retries, and clear UX.\nAcceptance:\n- Load tests for imports and queries\n- Throttling/backoff in place; DLQs drained\n- Error reporting and caching for hot queries","Epic,Observability,Reliability,MVP","MVP"
"Epic: Kafka and EKS (advanced depth)","Goal: Introduce MSK + EKS for replayable stream processing and advanced ops.\nAcceptance:\n- MSK topics created; producers/consumers wired\n- EKS service processes streams with HPA\n- Replay/backfill and chaos tests proven","Epic,Streaming,Kubernetes,Phase2","Phase2"
"Epic: Security, costs, and docs","Goal: Tighten IAM, set budgets, and document runbooks and decisions.\nAcceptance:\n- IAM least-privilege verified\n- Cost budgets/alerts configured\n- Runbooks and ADRs published","Epic,Security,Docs,MVP","MVP"
"Story: Monorepo setup","Create monorepo with Yarn workspaces/Turbo and shared packages (infra, backend, frontend, shared, data-contracts).\nAcceptance:\n- Install/build/test commands work root and per-package\n- Prettier/ESLint/TS configs shared","Story,Infra,CI/CD,MVP","MVP"
"Story: CDK bootstrap and base stacks","Bootstrap CDK and deploy base resources: S3, DynamoDB, API Gateway (placeholder), Cognito, CloudFront+S3 for SPA.\nAcceptance:\n- cdk synth/deploy succeeds in dev\n- Stacks parameterized per env","Story,Infra,IaC,MVP","MVP"
"Story: GitHub Actions with OIDC","Set up CI (lint/test/typecheck) and CD (CDK deploy to dev) using GitHub OIDC.\nAcceptance:\n- PR checks block on failures\n- Merge to main deploys dev; stage/prod require approval","Story,CI/CD,Security,MVP","MVP"
"Story: CloudWatch dashboards","Create dashboards for API, Lambdas, SQS, DDB; add SNS alarms for error rates, throttles, DLQ depth.\nAcceptance:\n- Dashboards render key KPIs\n- Alerts notify on thresholds","Story,Observability,Infra,MVP","MVP"
"Story: Cognito + React auth","Integrate Cognito Hosted UI or embedded auth into the SPA, attach JWT to API calls.\nAcceptance:\n- Login/logout works\n- Protected routes enforce auth","Story,Auth,Frontend,MVP","MVP"
"Story: SPA skeleton","Scaffold routes and layout: Upload, Chat, Explorer, Settings. Apply base theme and navigation.\nAcceptance:\n- Client routing works\n- Error/loading states present","Story,Frontend,UX,MVP","MVP"
"Story: Pre-signed upload flow","API returns pre-signed S3 PUT URL and jobId; client uploads CSV and shows progress placeholder.\nAcceptance:\n- Upload success/failure reflected\n- jobId persisted client-side","Story,Frontend,Backend,MVP","MVP"
"Story: Import API + job tracking","Create ImportJobs table and endpoints to create job, query status, and finalize on completion.\nAcceptance:\n- Status: created/running/failed/completed\n- Counts: processed/succeeded/failed","Story,Backend,API,MVP","MVP"
"Story: S3→SQS→Lambda parsing","Wire S3 event to SQS; Lambda reads object, parses CSV, validates rows, and emits normalized records.\nAcceptance:\n- Invalid rows quarantined with reason\n- Metrics for throughput and errors","Story,Backend,Data,MVP","MVP"
"Story: Batch write to DynamoDB with idempotency","Persist ticks with conditional writes and per-row idempotency keys.\nAcceptance:\n- Reprocessing does not duplicate rows\n- Unprocessed items retried with backoff","Story,Backend,Data,MVP","MVP"
"Story: Step Functions orchestration","Use Map state to split large files and track per-chunk progress.\nAcceptance:\n- Parallel chunks within configured cap\n- Job summary aggregates chunk results","Story,Backend,Orchestration,MVP","MVP"
"Story: DynamoDB Streams aggregator","Consume Streams to maintain Aggregates (counts by user/area/grade) with idempotent increments.\nAcceptance:\n- Double-processing safe\n- Lag monitored; DLQ configured","Story,Backend,Data,MVP","MVP"
"Story: Stats API","Implement /stats with filters (grade, minGrade, areaKey, date range); prefer aggregates, fallback to GSI queries.\nAcceptance:\n- Input validated; errors clear\n- p95 latency target documented","Story,Backend,API,MVP","MVP"
"Story: Explorer UI","Build filters UI backed by /stats; show counts and quick pivots.\nAcceptance:\n- Empty/loading/error handled\n- Deep-link to filtered views","Story,Frontend,UX,MVP","MVP"
"Story: Query DSL design + guardrails","Define JSON schema for queries and vocab (grades, areas). Reject unsupported fields.\nAcceptance:\n- Schema published in repo\n- Unit tests for validation","Story,Backend,Chat,MVP","MVP"
"Story: NL translator","Translate prompts to DSL via rules/model with strict clamping to vocab.\nAcceptance:\n- Passes a starter test suite\n- Logs original prompt + DSL","Story,Backend,Chat,MVP","MVP"
"Story: Chat endpoint and UI","/chat endpoint executes DSL, returns answer + trace; UI shows conversational result and link to Explorer.\nAcceptance:\n- Handles follow-ups within session\n- Clear errors for unsupported asks","Story,Backend,Frontend,Chat,MVP","MVP"
"Story: Test corpus","Create ~30 prompts covering grade/area/date variants with expected answers.\nAcceptance:\n- Runs in CI\n- Easy to extend","Story,QA,Chat,MVP","MVP"
"Story: Load test import","Generate 1M+ synthetic ticks; measure throughput, cost, and error rates.\nAcceptance:\n- Report checked into repo\n- Alarms validated under load","Story,Reliability,Performance,MVP","MVP"
"Story: Throttle and retry policies","Tune Lambda concurrency, SQS visibility timeouts, and DDB capacity; implement retries/backoff.\nAcceptance:\n- No sustained DDB throttles\n- Backpressure observed, not dropped","Story,Reliability,Backend,MVP","MVP"
"Story: Error surfacing","Job report shows sample bad rows and downloadable error CSV; API exposes error counts.\nAcceptance:\n- Clear user messaging\n- Quarantine bucket secured","Story,UX,Backend,MVP","MVP"
"Story: Caching hot queries","Cache frequent /stats results with TTL; document cache invalidation behavior.\nAcceptance:\n- p95 improved on repeats\n- Stale-while-revalidate noted","Story,Backend,Performance,MVP","MVP"
"Story: MSK cluster + topics","Provision MSK and create topics (tick-ingested, aggregates). Publish ingestion events.\nAcceptance:\n- IaC-managed; topic ACLs set\n- Producer confirmed","Story,Streaming,Infra,Phase2","Phase2"
"Story: Stream processor service on EKS","Deploy a consumer on EKS (Helm) to maintain aggregates; add HPA and liveness/readiness probes.\nAcceptance:\n- Zero-downtime rollout\n- Autoscaling under load","Story,Streaming,Kubernetes,Phase2","Phase2"
"Story: Replay/backfill","Support replaying topics to rebuild aggregates without downtime.\nAcceptance:\n- Deterministic results after replay\n- Runbook documented","Story,Streaming,Data,Phase2","Phase2"
"Story: Chaos test","Induce failures (kill pod, network blip); verify no data loss and recovery.\nAcceptance:\n- Lag recovers to baseline\n- Alerts fire appropriately","Story,Reliability,Kubernetes,Phase2","Phase2"
"Story: IAM least-privilege review","Tighten IAM roles/policies; constrain resource policies and add Access Analyzer checks.\nAcceptance:\n- Analyzer clean\n- Only required actions allowed","Story,Security,Infra,MVP","MVP"
"Story: Cost guardrails","Set budgets/alerts; note DDB On-Demand vs Provisioned thresholds and MSK/EKS cost notes.\nAcceptance:\n- Budget alerts firing test\n- Cost README updated","Story,Security,Cost,MVP","MVP"
"Story: Runbooks and ADRs","Write runbooks (imports, DLQ drain, replay) and ADRs for key decisions (serverless-first, DDB schema, DSL).\nAcceptance:\n- Docs reviewed\n- Linked in repo README","Story,Docs,Reliability,MVP","MVP"
